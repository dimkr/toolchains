name: build

on:
  push:
    branches:
      - master
  schedule:
    - cron: '0 0 1 * *'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Get cached ccache-arm
      uses: actions/cache@v2
      with:
        path: ccache-arm
        key: ${{ github.workflow }}-${{ github.job }}-ccache-arm-${{ github.sha }}
        restore-keys: |
          ${{ github.workflow }}-${{ github.job }}-ccache-arm-
    - name: ARM (little endian)
      run: |
        docker run --rm -w /root/toolchains -v `pwd`:/root/toolchains -e CCACHE_DIR=/root/toolchains/ccache-arm -e CCACHE_MAXSIZE=1G -e TRIPLET=arm-any32-linux-musleabi dimkr/toolchains ./build-toolchain.sh
        rm -rf .build/arm-any32-linux-musleabi
    - name: Get cached ccache-mips
      uses: actions/cache@v2
      with:
        path: ccache-mips
        key: ${{ github.workflow }}-${{ github.job }}-ccache-mips-${{ github.sha }}
        restore-keys: |
          ${{ github.workflow }}-${{ github.job }}-ccache-mips-
    - name: MIPS (big endian)
      run: |
        docker run --rm -w /root/toolchains -v `pwd`:/root/toolchains -e CCACHE_DIR=/root/toolchains/ccache-mips -e CCACHE_MAXSIZE=1G -e TRIPLET=mips-any32-linux-musl dimkr/toolchains ./build-toolchain.sh
        rm -rf .build/mips-any32-linux-musl
    - name: Get cached ccache-i386
      uses: actions/cache@v2
      with:
        path: ccache-i386
        key: ${{ github.workflow }}-${{ github.job }}-ccache-i386-${{ github.sha }}
        restore-keys: |
          ${{ github.workflow }}-${{ github.job }}-ccache-i386-
    - name: x86
      run: |
        docker run --rm -w /root/toolchains -v `pwd`:/root/toolchains -e CCACHE_DIR=/root/toolchains/ccache-i386 -e CCACHE_MAXSIZE=1G -e TRIPLET=i386-any32-linux-musl dimkr/toolchains ./build-toolchain.sh
        rm -rf .build/i386-any32-linux-musl
    - name: Get cached ccache-armeb
      uses: actions/cache@v2
      with:
        path: ccache-armeb
        key: ${{ github.workflow }}-${{ github.job }}-ccache-armeb-${{ github.sha }}
        restore-keys: |
          ${{ github.workflow }}-${{ github.job }}-ccache-armeb-
    - name: ARM (big endian)
      run: |
        patch config-arm-any32-linux-musleabi -o config-armeb-any32-linux-musleabi < arm-armeb.diff
        docker run --rm -w /root/toolchains -v `pwd`:/root/toolchains -e CCACHE_DIR=/root/toolchains/ccache-armeb -e CCACHE_MAXSIZE=1G -e TRIPLET=armeb-any32-linux-musleabi dimkr/toolchains ./build-toolchain.sh
        rm -rf .build/armeb-any32-linux-musleabi
    - name: Get cached ccache-mipsel
      uses: actions/cache@v2
      with:
        path: ccache-mipsel
        key: ${{ github.workflow }}-${{ github.job }}-ccache-mipsel-${{ github.sha }}
        restore-keys: |
          ${{ github.workflow }}-${{ github.job }}-ccache-mipsel-
    - name: MIPS (little endian)
      run: |
        patch config-mips-any32-linux-musl -o config-mipsel-any32-linux-musl < mips-mipsel.diff
        docker run --rm -w /root/toolchains -v `pwd`:/root/toolchains -e CCACHE_DIR=/root/toolchains/ccache-mipsel -e CCACHE_MAXSIZE=1G -e TRIPLET=mipsel-any32-linux-musl dimkr/toolchains ./build-toolchain.sh
        rm -rf .build/mipsel-any32-linux-musl
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: v${{ github.run_number }}
        draft: false
        prerelease: true
    - name: Upload little-endian ARM toolchain
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: arm-any32-linux-musleabi.tar.gz
        asset_name: arm-any32-linux-musleabi.tar.gz
        asset_content_type: application/octet-stream
    - name: Upload big-endian MIPS toolchain
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: mips-any32-linux-musl.tar.gz
        asset_name: mips-any32-linux-musl.tar.gz
        asset_content_type: application/octet-stream
    - name: Upload x86 toolchain
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: i386-any32-linux-musl.tar.gz
        asset_name: i386-any32-linux-musl.tar.gz
        asset_content_type: application/octet-stream
    - name: Upload big-endian ARM toolchain
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: armeb-any32-linux-musleabi.tar.gz
        asset_name: armeb-any32-linux-musleabi.tar.gz
        asset_content_type: application/octet-stream
    - name: Upload little-endian MIPS toolchain
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: mipsel-any32-linux-musl.tar.gz
        asset_name: mipsel-any32-linux-musl.tar.gz
        asset_content_type: application/octet-stream